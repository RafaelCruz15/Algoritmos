import numpy as np
import matplotlib.pyplot as plt

# Lecture 5 - Plotting Data

# Representar gráficamente los datos puede ser increíblemente
# útil para aprender cómo se comportan los datos y ver la
# estructura o los defectos potenciales
#-----------------------------Estructura de datos------------------------
print("                       Estructura de datos")
# los datos se devolverán como un objeto de marco de datos pandas
start = '2014-01-01'
end = '2015-01-01'
data = get_pricing(['AAPL', 'MSFT'], fields='price', start_date=start, end_date=end)
print(data.head())
print()

# La indexación en los datos con datos ['AAPL'] producirá un error porque
# el tipo de las columnas son objetos de equidad y no cadenas simples, vamos
# a corregirlo de esta manera
data.columns = [e.symbol for e in data.columns]
print(data.head())

# vamos a indexar
print(data['MSFT'].head())
print()

#--------------------------------Histograma---------------------------
print("                          Histograma")
# Un histograma es una visualización de cuán frecuentes son los diferentes valores
# de los datos. Al mostrar una distribución de frecuencia usando barras, nos
# permite ver rápidamente dónde se agrupan la mayoría de las observaciones

# Grafica un histograma usando 20 contenedores
plt.hist(data['MSFT'], bins=20)
plt.xlabel('Price')
plt.ylabel('Number of Days Observed')
plt.title('Frequency Distribution of MSFT Prices, 2014');
print()

#-----------------------------Retorna Histograma---------------------------
print("                       Retorna Histograma")
# Eliminar el primer elemento porque el porcentaje de cambio de nada a algo es NaN
R = data['MSFT'].pct_change()[1:]

# Grafica un histograma usando 20 contenedores
plt.hist(R, bins=20)
plt.xlabel('Return')
plt.ylabel('Number of Days Observed')
plt.title('Frequency Distribution of MSFT Returns, 2014');
print()

#-------------------Histograma acumulado (FCD estimado discreto)----------------
print("             Histograma acumulado (FCD estimado discreto)")
# Eliminar el primer elemento porque el porcentaje de cambio de nada a algo es NaN
R = data['MSFT'].pct_change()[1:]

# Grafica un histograma usando 20 contenedores
plt.hist(R, bins=20, cumulative=True)
plt.xlabel('Retorna')
plt.ylabel('Numero de Dias Observados')
plt.title('Distribución acumulativa de retornos MSFT, 2014');
print()

#-----------------------------Gráfico de dispersión-----------------------------
print("                       Gráfico de dispersión")
# Un diagrama de dispersión es útil para visualizar la relación entre dos conjuntos
# de datos. Usamos dos conjuntos de datos que tienen algún tipo de correspondencia,
# como la fecha en que se tomó la medición. Cada punto representa dos valores
# correspondientes de los dos conjuntos de datos.

# grafica
plt.scatter(data['MSFT'], data['AAPL'])
plt.xlabel('MSFT')
plt.ylabel('AAPL')
plt.title('Daily Prices in 2014');

R_msft = data['MSFT'].pct_change()[1:]
R_aapl = data['AAPL'].pct_change()[1:]

plt.scatter(R_msft, R_aapl)
plt.xlabel('MSFT')
plt.ylabel('AAPL')
plt.title('Daily Returns in 2014');
print()

#-----------------------------Gráfico de línea-----------------------------
print("                       Gráfico de línea")
# Se puede usar un gráfico de líneas cuando queremos rastrear el desarrollo del valor
# y a medida que cambia el valor x. Por ejemplo, cuando estamos trazando el precio de
# una acción, mostrarlo como un gráfico de líneas en lugar de simplemente trazar los
# puntos de datos hace que sea más fácil seguir el precio a lo largo del tiempo

# grafica
plt.plot(data['MSFT'])
plt.plot(data['AAPL'])
plt.ylabel('Price')
plt.legend(['MSFT', 'AAPL']);

# Eliminar el primer elemento porque el porcentaje de cambio de nada a algo es NaN
R = data['MSFT'].pct_change()[1:]

plt.plot(R)
plt.ylabel('Return')
plt.title('MSFT Returns');